//
//  dyld.h
//  dyldExploitMacOS_x86_64
//
//  Created by Linus Henze.
//  Copyright Â© 2021 Linus Henze. All rights reserved.
//

/* The definitions below were taken from dyld-750.6 */
/* License: Apple Public Source License */

/*
 * Copyright (c) 2017 Apple Inc. All rights reserved.
 *
 * @APPLE_LICENSE_HEADER_START@
 *
 * This file contains Original Code and/or Modifications of Original Code
 * as defined in and that are subject to the Apple Public Source License
 * Version 2.0 (the 'License'). You may not use this file except in
 * compliance with the License. Please obtain a copy of the License at
 * http://www.opensource.apple.com/apsl/ and read it before using this
 * file.
 *
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
 * Please see the License for the specific language governing rights and
 * limitations under the License.
 *
 * @APPLE_LICENSE_HEADER_END@
 */

#ifndef dyld_h
#define dyld_h

#include <stdint.h>

enum Type: uint32_t {
    // containers which have an overall length and TypedBytes inside their content
    launchClosure    =  1, // contains TypedBytes of closure attributes including imageArray
    imageArray       =  2, // sizeof(ImageArray) + sizeof(uint32_t)*count + size of all images
    image            =  3, // contains TypedBytes of image attributes
    dlopenClosure    =  4, // contains TypedBytes of closure attributes including imageArray

    // attributes for Images
    imageFlags       =  7, // sizeof(Image::Flags)
    pathWithHash     =  8, // len = uint32_t + length path + 1, use multiple entries for aliases
    fileInodeAndTime =  9, // sizeof(FileInfo)
    cdHash           = 10, // 20, use multiple entries on watchOS for all hashes
    uuid             = 11, // 16
    mappingInfo      = 12, // sizeof(MappingInfo)
    diskSegment      = 13, // sizeof(DiskSegment) * count
    cacheSegment     = 14, // sizeof(DyldCacheSegment) * count
    dependents       = 15, // sizeof(LinkedImage) * count
    initOffsets      = 16, // sizeof(uint32_t) * count
    dofOffsets       = 17, // sizeof(uint32_t) * count
    codeSignLoc      = 18, // sizeof(CodeSignatureLocation)
    fairPlayLoc      = 19, // sizeof(FairPlayRange)
    rebaseFixups     = 20, // sizeof(RebasePattern) * count
    bindFixups       = 21, // sizeof(BindPattern) * count
    cachePatchInfo   = 22, // deprecated
    textFixups       = 23, // sizeof(TextFixupPattern) * count
    imageOverride    = 24, // sizeof(ImageNum)
    initBefores      = 25, // sizeof(ImageNum) * count
    initsSection     = 26, // sizeof(InitializerSectionRange)
    chainedFixupsTargets = 27, // sizeof(ResolvedSymbolTarget) * count
    termOffsets      = 28, // sizeof(uint32_t) * count
    chainedStartsOffset = 29, // sizeof(uint64_t)
    objcFixups       = 30,   // sizeof(ResolvedSymbolTarget) + (sizeof(uint32_t) * 2) + (sizeof(ProtocolISAFixup) * count) + (sizeof(SelectorReferenceFixup) * count)

    // attributes for Closures (launch or dlopen)
    closureFlags            = 32,  // sizeof(Closure::Flags)
    dyldCacheUUID           = 33,  // 16
    missingFiles            = 34,
    envVar                  = 35,  // "DYLD_BLAH=stuff"
    topImage                = 36,  // sizeof(ImageNum)
    libDyldEntry            = 37,  // sizeof(ResolvedSymbolTarget)
    libSystemNum            = 38,  // sizeof(ImageNum)
    bootUUID                = 39,  // c-string 40
    mainEntry               = 40,  // sizeof(ResolvedSymbolTarget)
    startEntry              = 41,  // sizeof(ResolvedSymbolTarget)     // used by programs built with crt1.o
    cacheOverrides          = 42,  // sizeof(PatchEntry) * count       // used if process uses interposing or roots (cached dylib overrides)
    interposeTuples         = 43,  // sizeof(InterposingTuple) * count
    existingFiles           = 44,  // uint64_t + (SkippedFiles * count)
    selectorTable           = 45,  // uint32_t + (sizeof(ObjCSelectorImage) * count) + hashTable size
    classTable              = 46,  // (3 * uint32_t) + (sizeof(ObjCClassImage) * count) + classHashTable size + protocolHashTable size
    warning                 = 47,  // len = uint32_t + length path + 1, use one entry per warning
    duplicateClassesTable   = 48,  // duplicateClassesHashTable
    progVars                = 49,  // sizeof(uint32_t)
};

typedef struct {
    enum Type    type          : 8;
    uint32_t     payloadLength : 24;
} TypedBytes;

typedef struct {
    uint32_t     attrCount;
    enum Type    type          : 8;
    uint32_t     payloadLength : 24;
    TypedBytes   attributes[];
} AnImage;

typedef struct {
    enum Type    type          : 8;
    uint32_t     payloadLength : 24;
    uint32_t        firstImageNum;
    uint32_t        count       : 31;
    uint32_t        hasRoots    : 1; // True if this ImageArray contains roots with imageNum's below firstImageNum
    AnImage         images[];
} ImageArray;

enum Kinds { kindRebase, kindSharedCache, kindImage, kindAbsolute };

typedef struct {
    uint64_t    kind            :  2,       // kindRebase
                unused          : 62;       // all zeros
} Rebase;

typedef struct {
    uint64_t    kind            :  2;       // kindSharedCache
    int64_t     offset          : 62;
} SharedCache;

typedef struct {
    uint64_t    kind            :  2,       // kindImage
                imageNum        : 22;       // ImageNum
    int64_t     offset          : 40;
} Image;

typedef struct {
    uint64_t    kind            :  2,       // kindAbsolute
                value           : 62;       // sign extended
} Absolute;

typedef union {
    Rebase          rebase;
    SharedCache     sharedCache;
    Image           image;
    Absolute        absolute;
    uint64_t        raw;
} ResolvedSymbolTarget;
static_assert(sizeof(ResolvedSymbolTarget) == 8, "Invalid size");

typedef struct {
    ResolvedSymbolTarget     target;
    uint64_t                 startVmOffset : 40, // max 1TB offset
                             skipCount     :  8,
                             repeatCount   : 16;
} BindPattern;

typedef struct {
    uint32_t     imgNum         :  30,
                 linkKind       :   2;
} LinkedImage;

typedef struct {
    uint64_t    filePageCount   : 30,
                vmPageCount     : 30,
                permissions     : 3,
                paddingNotSeg   : 1;
} DiskSegment;

#endif /* dyld_h */
