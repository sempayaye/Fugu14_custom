//
//  helper.m
//  iDebug
//
//  Created by Linus Henze.
//  Copyright Â© 2020/2021 Linus Henze. All rights reserved.
//

#import <sys/sysctl.h>
#import <libproc.h>

#import "helper.h"

pid_t pidOfProcess(NSString* process) {
    // First get all processes
    int name[] = { CTL_KERN, KERN_PROC, KERN_PROC_ALL };
    size_t size = 0;

    // Get length
    int err = sysctl((int*) name, 3, NULL, &size, NULL, 0);
    if (err) {
        return 0;
    }
    
    // Allocate buffer
    struct kinfo_proc *proc_list = malloc(size);
    if (proc_list == NULL) {
        return 0;
    }
    
    // Get all processes
    err = sysctl((int*) name, 3, proc_list, &size, NULL, 0);
    if (err) {
        free(proc_list);
        return 0;
    }
    
    // Loop over them
    for (int i = 0; i < (size / sizeof(struct kinfo_proc)); i++) {
        pid_t pid = proc_list[i].kp_proc.p_pid;
        
        if (pid == 0) {
            continue;
        }
        
        char pathbuf[PROC_PIDPATHINFO_MAXSIZE];
        err = proc_pidpath(pid, pathbuf, PROC_PIDPATHINFO_MAXSIZE);
        if (err <= 0) {
            continue;
        }
        
        NSString *path = [NSString stringWithUTF8String: pathbuf];
        
        if ([path isEqualToString: process]) {
            free(proc_list);
            
            return pid;
        }
    }
    
    // Free
    free(proc_list);
    
    return 0;
}
